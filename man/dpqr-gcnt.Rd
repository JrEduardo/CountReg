% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gcnt.R
\name{dpqr-gcnt}
\alias{dgcnt}
\alias{dpqr-gcnt}
\alias{pgcnt}
\alias{qgcnt}
\alias{rgcnt}
\title{Functions for the Gamma Count Distribution}
\usage{
dgcnt(x, lambda, alpha, log = FALSE, offset = 1)

pgcnt(x, lambda, alpha = 1, lower.tail = TRUE, log = FALSE)

qgcnt(p, lambda, alpha = 1)

rgcnt(n, lambda, alpha = 1)
}
\arguments{
\item{x}{Positive interger value.}

\item{lambda}{A numeric vector with values for the location parameter
of the Gamma Count distribution.}

\item{alpha}{A numeric vector with values for the dispersion
parameter of the Gamma Count distribution.}

\item{log}{A logical value. If \code{TRUE}, probabilities \code{p}
are given as \code{log(p)}.}

\item{offset}{A numeric vector with the correponding space size where
the counts are observed.}

\item{lower.tail}{A logical value. If \code{TRUE} (default),
probabilities are \eqn{\Pr(X \leq x)} otherwise, \eqn{\Pr(X > x)}.}

\item{p}{A vector of probabilities.}

\item{n}{An integer vector of length one that is the amount of random
numbers to be generated.}
}
\value{
\code{dgcnt} gives the probability \eqn{\Pr(X = x)},
    \code{pgcnt} gives the cummulated probability \eqn{\Pr(X \leq x)}
    or its complement, \code{qgcnt} gives the quantiles and
    \code{rgcnt} generates random values.
}
\description{
Probability function, distribution function, quantile
    function and random generation for the Gamma Count distribution.
}
\details{
The function \code{dgcnt()} is implemented in R. The
    probability function of the Gamma Count is based on the
    difference of cumulated probabilities of the Gamma density
    function. These differences are numerically non distinguishable
    of zero at the tails, so the logarithm of the probabilities is
    \code{-Inf}. We decide replace \code{-Inf} by \code{-744}, that
    is the logarithm of the smallest value.

BBBB

The \code{qgcnt()} is implemented in \strong{C++} in two
    versions. The first is implemented for the \emph{idd} case that
    is when both \code{lambda} and \code{alpha} are vectors of length
    one. In this case, the vector of probabilities \code{p} is
    ordered for the quantile search in the ascending direction. At
    the end, the values are restored to the original order. The other
    version deals with the \emph{non idd} case by recursive calls of
    the function at each vector point. For simulation studies is
    desirable use the \emph{idd} version because it is faster.

The \code{rgcnt()} is implemented in \strong{C++} in two
    versions. The first is implemented for the \emph{idd} case that
    is when both \code{lambda} and \code{alpha} are vectors of length
    one. In this case, a vector of \code{n} uniform random numbers is
    ordered for the quantile search in the ascending direction. At
    the end, the values are randomized in the vector. The other
    version deals with the \emph{non idd} case by recursive calls of
    the function at each vector point. For simulation studies is
    desirable use the \emph{idd} version because it is faster.
}
\examples{

dgcnt(5, 5, 1)
dpois(5, 5, 1)


qgcnt(runif(5), 10, 1)
qpois(runif(5), 10)


x <- rgcnt(1000, 10, 1)

plot(ecdf(x))
curve(ppois(x, 10), add = TRUE, type = "s", col = 2)

}
\author{
Walmes Zeviani, \email{walmes@ufpr.br}.
}

